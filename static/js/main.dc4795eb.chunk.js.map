{"version":3,"sources":["components/Title/Title.js","components/CharacterList/CharacterCard/ImageCard/ImageCard.js","components/CharacterList/CharacterCard/NameCard/NameCard.js","components/CharacterList/CharacterCard/ListCard/ListCard.js","components/CharacterList/CharacterCard/CharacterCard.js","components/CharacterList/CharacterList.js","components/RickAndMortyPage.js","App.js","serviceWorker.js","index.js"],"names":["RickAndMortyPage","state","title","Container","className","this","React","Component","ImageCard","Card","Img","variant","src","props","image","NameCard","Body","Title","href","onClick","e","window","location","target","innerHTML","name","icon","ListGroup","ListGroupItem","chars","origin","episode","length","species","gender","CharacterCard","Col","sm","CharacterList","characters","axios","get","then","res","data","results","setState","catch","error","console","log","Row","map","id","key","App","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mVAIqBA,G,kNACnBC,MAAQ,CACNC,MAAO,iD,uDAIP,OACE,kBAACC,EAAA,EAAD,KACE,wBAAIC,UAAU,cAAcC,KAAKJ,MAAMC,Y,GARDI,IAAMC,Y,iCCD/BC,E,uKAEjB,OAAO,kBAACC,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,KAAKQ,MAAMC,Y,GAFZR,IAAMC,W,gBCIxBQ,E,uKAOjB,OACE,kBAACN,EAAA,EAAKO,KAAN,KACE,kBAACP,EAAA,EAAKQ,MAAN,CAAYC,KAAK,IAAId,UAAU,aAAae,QANhD,SAAqBC,GACjBC,OAAOC,SAASJ,KAAhB,uDAAqEE,EAAEG,OAAOC,UAA9E,2BAKmEnB,KAAKQ,MAAMY,MAC9E,kBAAC,IAAD,CAAiBC,KAAK,sB,GAVQpB,IAAMC,W,gBCJvBQ,E,uKAEjB,OACE,kBAACY,EAAA,EAAD,CAAWvB,UAAU,oBACnB,kBAACwB,EAAA,EAAD,kBAA0BvB,KAAKQ,MAAMgB,MAAMP,SAASG,MACpD,kBAACG,EAAA,EAAD,gBAAwBvB,KAAKQ,MAAMgB,MAAMC,OAAOL,MAChD,kBAACG,EAAA,EAAD,iBAAyBvB,KAAKQ,MAAMgB,MAAME,QAAQC,QAClD,kBAACJ,EAAA,EAAD,iBAAyBvB,KAAKQ,MAAMgB,MAAMI,SAC1C,kBAACL,EAAA,EAAD,gBAAwBvB,KAAKQ,MAAMgB,MAAMK,a,GARX5B,IAAMC,WCGvB4B,E,uKAEjB,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC5B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWK,MAAOT,KAAKQ,MAAMgB,MAAMf,QACnC,kBAAC,EAAD,CAAUW,KAAMpB,KAAKQ,MAAMgB,MAAMJ,OACjC,kBAAC,EAAD,CAAUI,MAAOxB,KAAKQ,MAAMgB,c,GAPKvB,IAAMC,W,QCC5B+B,E,4MACnBrC,MAAQ,CACNsC,WAAY,I,kEAGO,IAAD,OAClBC,IACGC,IADH,8CAEGC,MAAK,SAACC,GACL,IAAMJ,EAAaI,EAAIC,KAAKC,QAC5B,EAAKC,SAAS,CAAEP,kBAEjBQ,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAKhB,OACE,kBAACG,EAAA,EAAD,KACG9C,KAAKJ,MAAMsC,WAAWa,KAAI,SAACvB,EAAOwB,GACjC,OAAO,kBAAC,EAAD,CAAeC,IAAKD,EAAIxB,MAAOA,Y,GArBLvB,IAAMC,WCC5BP,G,6KAEjB,OACE,6BAASI,UAAU,aACjB,kBAACD,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANoCG,IAAMC,Y,OCJrC,SAASgD,IACtB,OACA,8BACI,kBAAC,IAAD,CAAOC,KAAK,GAAGC,UAAWzD,KCKZ0D,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAASC,MACvB,2D,kBCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAACR,EAAD,QAGJS,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.dc4795eb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport \"../../styles/title.scss\";\n\nexport default class RickAndMortyPage extends React.Component {\n  state = {\n    title: 'Welcome to Gracious Rick and Morty La La Land',\n  };\n\n  render() {\n    return (\n      <Container>\n        <h2 className=\"main-title\">{this.state.title}</h2>\n      </Container>\n    );\n  }\n}","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport default class ImageCard extends React.Component {\n  render() {\n    return <Card.Img variant=\"top\" src={this.props.image} />;\n  }\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"../../../../styles/character-list.scss\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\n\nexport default class NameCard extends React.Component {\n  render() {\n\n    function handleClick(e) {\n        window.location.href=`https://www.youtube.com/results?search_query=${e.target.innerHTML}%20rick%20and%20morty`;\n      }\n\n    return (\n      <Card.Body>\n        <Card.Title href=\"#\" className=\"title-name\" onClick={handleClick}>{this.props.name}</Card.Title>\n        <FontAwesomeIcon icon=\"check-square\"/>\n      </Card.Body>\n    );\n  }\n}\n","import React from \"react\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\n\nexport default class NameCard extends React.Component {\n  render() {\n    return (\n      <ListGroup className=\"list-group-flush\">\n        <ListGroupItem>Location: {this.props.chars.location.name}</ListGroupItem>\n        <ListGroupItem>Origin: {this.props.chars.origin.name}</ListGroupItem>\n        <ListGroupItem>Episode: {this.props.chars.episode.length}</ListGroupItem>\n        <ListGroupItem>Species: {this.props.chars.species}</ListGroupItem>\n        <ListGroupItem>Gender: {this.props.chars.gender}</ListGroupItem>\n      </ListGroup>\n    );\n  }\n}\n","import React from \"react\";\nimport { Card, Col } from \"react-bootstrap\";\nimport ImageCard from \"./ImageCard/ImageCard\";\nimport NameCard from \"./NameCard/NameCard\";\nimport ListCard from \"./ListCard/ListCard\";\n\nexport default class CharacterCard extends React.Component {\n  render() {\n    return (\n      <Col sm={3}>\n        <Card>\n          <ImageCard image={this.props.chars.image} />\n          <NameCard name={this.props.chars.name} />\n          <ListCard chars={this.props.chars} />\n        </Card>\n      </Col>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport CharacterCard from \"./CharacterCard/CharacterCard\";\nimport { Row } from \"react-bootstrap\";\nimport \"../../styles/character-list.scss\";\n\n\nexport default class CharacterList extends React.Component {\n  state = {\n    characters: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://rickandmortyapi.com/api/character/`)\n      .then((res) => {\n        const characters = res.data.results;\n        this.setState({ characters });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <Row>\n        {this.state.characters.map((chars, id) => {\n          return <CharacterCard key={id} chars={chars} />;\n        })}\n      </Row>\n    );\n  }\n}\n","import React from \"react\";\n//children components\nimport Title from \"./Title/Title\";\nimport CharacterList from \"./CharacterList/CharacterList\";\n\nimport { Container } from \"react-bootstrap\";\nimport \"../styles/rickandmorty-page.scss\";\n\nexport default class RickAndMortyPage extends React.Component {\n  render() {\n    return (\n      <section className=\"main-page\">\n        <Container>\n          <Title />\n          <CharacterList />\n        </Container>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport RickAndMortyPage from './components/RickAndMortyPage';\nimport { Route } from 'react-router-dom';\n\nexport default function App() {\n  return (\n  <main>\n      <Route path=\"\" component={RickAndMortyPage} />\n  </main>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Route } from 'react-router-dom';\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Route>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Route>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}