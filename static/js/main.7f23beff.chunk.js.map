{"version":3,"sources":["components/Title/Title.js","components/CharacterList/CharacterCard/CharacterCard.js","components/CharacterList/CharacterList.js","components/RickAndMortyPage.js","App.js","serviceWorker.js","index.js"],"names":["RickAndMortyPage","state","title","this","React","Component","CharacterCard","props","Col","sm","className","Card","Img","variant","src","chars","image","Body","Title","name","ListGroup","ListGroupItem","location","origin","episode","length","species","gender","CharacterList","characters","axios","get","then","res","data","results","setState","console","log","catch","error","Row","map","id","key","Container","App","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6UAEqBA,E,4MACnBC,MAAQ,CACNC,MAAO,iD,uDAIP,OACI,4BAAKC,KAAKF,MAAMC,W,GAPsBE,IAAMC,W,uDCOrC,SAASC,EAAcC,GACpC,OACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,UAAU,eACpB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKP,EAAMQ,MAAMC,QACzC,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,CAAYR,UAAU,cAAcH,EAAMQ,MAAMI,OAElD,kBAACC,EAAA,EAAD,CAAWV,UAAU,oBACnB,kBAACW,EAAA,EAAD,kBAA0Bd,EAAMQ,MAAMO,SAASH,MAC/C,kBAACE,EAAA,EAAD,gBAAwBd,EAAMQ,MAAMQ,OAAOJ,MAC3C,kBAACE,EAAA,EAAD,iBAAyBd,EAAMQ,MAAMS,QAAQC,QAC7C,kBAACJ,EAAA,EAAD,iBAAyBd,EAAMQ,MAAMW,SACrC,kBAACL,EAAA,EAAD,gBAAwBd,EAAMQ,MAAMY,W,YCf3BC,G,kNACnB3B,MAAQ,CACN4B,WAAY,I,kEAGO,IAAD,OAClBC,IACGC,IADH,8CAEGC,MAAK,SAACC,GACL,IAAMJ,EAAaI,EAAIC,KAAKC,QAC5B,EAAKC,SAAS,CAAEP,eAChBQ,QAAQC,IAAI,YAAa,EAAKrC,MAAM4B,eAErCU,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAKhB,OACE,kBAACC,EAAA,EAAD,KACGtC,KAAKF,MAAM4B,WAAWa,KAAI,SAAC3B,EAAO4B,GACjC,OAAO,kBAACrC,EAAD,CAAesC,IAAKD,EAAI5B,MAAOA,Y,GAtBLX,IAAMC,Y,QCE5BL,G,kNACnBC,MAAQ,G,uDAIN,OACE,6BAASS,UAAU,aACjB,kBAACmC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GATkCzC,IAAMC,Y,OCLrC,SAASyC,IACtB,OACA,8BACI,kBAAC,IAAD,CAAOC,KAAK,GAAGC,UAAWhD,KCKZiD,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2D,kBCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAACT,EAAD,QAGJU,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMuB,c","file":"static/js/main.7f23beff.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class RickAndMortyPage extends React.Component {\n  state = {\n    title: 'Welcome to Gracious Rick and Morty La La Land',\n  };\n\n  render() {\n    return (\n        <h2>{this.state.title}</h2>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  Card,\n  ListGroup,\n  ListGroupItem,\n  Col,\n} from \"react-bootstrap\";\nimport \"../../../styles/character-card.scss\";\n\nexport default function CharacterCard(props) {\n  return (\n      <Col sm={3} className=\"card-column\">\n        <Card>\n          <Card.Img variant=\"top\" src={props.chars.image} />\n          <Card.Body>\n            <Card.Title className=\"title-name\">{props.chars.name}</Card.Title>\n          </Card.Body>\n          <ListGroup className=\"list-group-flush\">\n            <ListGroupItem>Location: {props.chars.location.name}</ListGroupItem>\n            <ListGroupItem>Origin: {props.chars.origin.name}</ListGroupItem>\n            <ListGroupItem>Episode: {props.chars.episode.length}</ListGroupItem>\n            <ListGroupItem>Species: {props.chars.species}</ListGroupItem>\n            <ListGroupItem>Gender: {props.chars.gender}</ListGroupItem>\n          </ListGroup>\n        </Card>\n      </Col>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport CharacterCard from \"./CharacterCard/CharacterCard\";\nimport { Row } from \"react-bootstrap\";\nimport \"../../styles/character-list.scss\";\n\n\nexport default class CharacterList extends React.Component {\n  state = {\n    characters: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(`https://rickandmortyapi.com/api/character/`)\n      .then((res) => {\n        const characters = res.data.results;\n        this.setState({ characters });\n        console.log(\"RESPONSES\", this.state.characters);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <Row>\n        {this.state.characters.map((chars, id) => {\n          return <CharacterCard key={id} chars={chars} />;\n        })}\n      </Row>\n    );\n  }\n}\n","import React from \"react\";\n//children components\nimport Title from \"./Title/Title\";\nimport CharacterList from \"./CharacterList/CharacterList\";\n\nimport { Container } from \"react-bootstrap\";\nimport \"../styles/rickandmorty-page.scss\";\n\n\nexport default class RickAndMortyPage extends React.Component {\n  state = {\n  };\n\n  render() {\n    return (\n      <section className=\"main-page\">\n        <Container>\n            <Title/>\n            <CharacterList/>\n        </Container>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport RickAndMortyPage from './components/RickAndMortyPage';\nimport { Route } from 'react-router-dom';\n\nexport default function App() {\n  return (\n  <main>\n      <Route path=\"\" component={RickAndMortyPage} />\n  </main>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Route } from 'react-router-dom';\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Route>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Route>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}